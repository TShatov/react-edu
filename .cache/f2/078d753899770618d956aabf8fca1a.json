{"id":"src/mathoperations.js","dependencies":[{"name":"D:\\Work\\REACT\\Second app\\.babelrc","includedInParent":true,"mtime":1673373093719},{"name":"D:\\Work\\REACT\\Second app\\package.json","includedInParent":true,"mtime":1673379571714}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MathOperations = void 0;\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar MathOperations = /*#__PURE__*/function () {\n  function MathOperations() {\n    _classCallCheck(this, MathOperations);\n  }\n  _createClass(MathOperations, null, [{\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      return a * b;\n    }\n  }, {\n    key: \"sum\",\n    value: function sum(a, b) {\n      return a + b;\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(a, b) {\n      return a - b;\n    }\n  }, {\n    key: \"divide\",\n    value: function divide(a, b) {\n      return a / b;\n    }\n  }]);\n  return MathOperations;\n}();\nexports.MathOperations = MathOperations;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":13,"column":4},"source":"src/mathoperations.js","original":{"line":1,"column":13},"name":"MathOperations"},{"generated":{"line":13,"column":18},"source":"src/mathoperations.js","original":{"line":1,"column":27}},{"generated":{"line":14,"column":2},"source":"src/mathoperations.js","original":{"line":1,"column":27}},{"generated":{"line":15,"column":4},"source":"src/mathoperations.js","original":{"line":1,"column":27}},{"generated":{"line":16,"column":2},"source":"src/mathoperations.js","original":{"line":1,"column":27}},{"generated":{"line":17,"column":2},"source":"src/mathoperations.js","original":{"line":1,"column":27}},{"generated":{"line":18,"column":4},"source":"src/mathoperations.js","original":{"line":1,"column":27}},{"generated":{"line":19,"column":4},"source":"src/mathoperations.js","original":{"line":1,"column":27}},{"generated":{"line":19,"column":11},"source":"src/mathoperations.js","original":{"line":2,"column":2}},{"generated":{"line":19,"column":29},"source":"src/mathoperations.js","original":{"line":2,"column":18},"name":"a"},{"generated":{"line":19,"column":30},"source":"src/mathoperations.js","original":{"line":2,"column":19}},{"generated":{"line":19,"column":32},"source":"src/mathoperations.js","original":{"line":2,"column":20},"name":"b"},{"generated":{"line":19,"column":33},"source":"src/mathoperations.js","original":{"line":2,"column":21}},{"generated":{"line":19,"column":35},"source":"src/mathoperations.js","original":{"line":2,"column":23}},{"generated":{"line":20,"column":6},"source":"src/mathoperations.js","original":{"line":3,"column":4}},{"generated":{"line":20,"column":13},"source":"src/mathoperations.js","original":{"line":3,"column":11},"name":"a"},{"generated":{"line":20,"column":14},"source":"src/mathoperations.js","original":{"line":3,"column":12}},{"generated":{"line":20,"column":17},"source":"src/mathoperations.js","original":{"line":3,"column":15},"name":"b"},{"generated":{"line":20,"column":18},"source":"src/mathoperations.js","original":{"line":3,"column":16}},{"generated":{"line":21,"column":4},"source":"src/mathoperations.js","original":{"line":4,"column":2}},{"generated":{"line":22,"column":2},"source":"src/mathoperations.js","original":{"line":4,"column":3}},{"generated":{"line":23,"column":4},"source":"src/mathoperations.js","original":{"line":4,"column":3}},{"generated":{"line":24,"column":4},"source":"src/mathoperations.js","original":{"line":4,"column":3}},{"generated":{"line":24,"column":11},"source":"src/mathoperations.js","original":{"line":6,"column":2}},{"generated":{"line":24,"column":24},"source":"src/mathoperations.js","original":{"line":6,"column":13},"name":"a"},{"generated":{"line":24,"column":25},"source":"src/mathoperations.js","original":{"line":6,"column":14}},{"generated":{"line":24,"column":27},"source":"src/mathoperations.js","original":{"line":6,"column":15},"name":"b"},{"generated":{"line":24,"column":28},"source":"src/mathoperations.js","original":{"line":6,"column":16}},{"generated":{"line":24,"column":30},"source":"src/mathoperations.js","original":{"line":6,"column":18}},{"generated":{"line":25,"column":6},"source":"src/mathoperations.js","original":{"line":7,"column":4}},{"generated":{"line":25,"column":13},"source":"src/mathoperations.js","original":{"line":7,"column":11},"name":"a"},{"generated":{"line":25,"column":14},"source":"src/mathoperations.js","original":{"line":7,"column":12}},{"generated":{"line":25,"column":17},"source":"src/mathoperations.js","original":{"line":7,"column":15},"name":"b"},{"generated":{"line":25,"column":18},"source":"src/mathoperations.js","original":{"line":7,"column":16}},{"generated":{"line":26,"column":4},"source":"src/mathoperations.js","original":{"line":8,"column":2}},{"generated":{"line":27,"column":2},"source":"src/mathoperations.js","original":{"line":8,"column":3}},{"generated":{"line":28,"column":4},"source":"src/mathoperations.js","original":{"line":8,"column":3}},{"generated":{"line":29,"column":4},"source":"src/mathoperations.js","original":{"line":8,"column":3}},{"generated":{"line":29,"column":11},"source":"src/mathoperations.js","original":{"line":10,"column":2}},{"generated":{"line":29,"column":29},"source":"src/mathoperations.js","original":{"line":10,"column":18},"name":"a"},{"generated":{"line":29,"column":30},"source":"src/mathoperations.js","original":{"line":10,"column":19}},{"generated":{"line":29,"column":32},"source":"src/mathoperations.js","original":{"line":10,"column":20},"name":"b"},{"generated":{"line":29,"column":33},"source":"src/mathoperations.js","original":{"line":10,"column":21}},{"generated":{"line":29,"column":35},"source":"src/mathoperations.js","original":{"line":10,"column":23}},{"generated":{"line":30,"column":6},"source":"src/mathoperations.js","original":{"line":11,"column":4}},{"generated":{"line":30,"column":13},"source":"src/mathoperations.js","original":{"line":11,"column":11},"name":"a"},{"generated":{"line":30,"column":14},"source":"src/mathoperations.js","original":{"line":11,"column":12}},{"generated":{"line":30,"column":17},"source":"src/mathoperations.js","original":{"line":11,"column":15},"name":"b"},{"generated":{"line":30,"column":18},"source":"src/mathoperations.js","original":{"line":11,"column":16}},{"generated":{"line":31,"column":4},"source":"src/mathoperations.js","original":{"line":12,"column":2}},{"generated":{"line":32,"column":2},"source":"src/mathoperations.js","original":{"line":12,"column":3}},{"generated":{"line":33,"column":4},"source":"src/mathoperations.js","original":{"line":12,"column":3}},{"generated":{"line":34,"column":4},"source":"src/mathoperations.js","original":{"line":12,"column":3}},{"generated":{"line":34,"column":11},"source":"src/mathoperations.js","original":{"line":14,"column":2}},{"generated":{"line":34,"column":27},"source":"src/mathoperations.js","original":{"line":14,"column":16},"name":"a"},{"generated":{"line":34,"column":28},"source":"src/mathoperations.js","original":{"line":14,"column":17}},{"generated":{"line":34,"column":30},"source":"src/mathoperations.js","original":{"line":14,"column":18},"name":"b"},{"generated":{"line":34,"column":31},"source":"src/mathoperations.js","original":{"line":14,"column":19}},{"generated":{"line":34,"column":33},"source":"src/mathoperations.js","original":{"line":14,"column":21}},{"generated":{"line":35,"column":6},"source":"src/mathoperations.js","original":{"line":15,"column":4}},{"generated":{"line":35,"column":13},"source":"src/mathoperations.js","original":{"line":15,"column":11},"name":"a"},{"generated":{"line":35,"column":14},"source":"src/mathoperations.js","original":{"line":15,"column":12}},{"generated":{"line":35,"column":17},"source":"src/mathoperations.js","original":{"line":15,"column":15},"name":"b"},{"generated":{"line":35,"column":18},"source":"src/mathoperations.js","original":{"line":15,"column":16}},{"generated":{"line":36,"column":4},"source":"src/mathoperations.js","original":{"line":16,"column":2}},{"generated":{"line":37,"column":2},"source":"src/mathoperations.js","original":{"line":16,"column":3}},{"generated":{"line":38,"column":2},"source":"src/mathoperations.js","original":{"line":16,"column":3}},{"generated":{"line":39,"column":0},"source":"src/mathoperations.js","original":{"line":16,"column":3}},{"generated":{"line":40,"column":0},"source":"src/mathoperations.js","original":{"line":16,"column":3}}],"sources":{"src/mathoperations.js":"export class MathOperations {\r\n  static multiply(a,b) {\r\n    return a * b;\r\n  }\r\n\r\n  static sum(a,b) {\r\n    return a + b;\r\n  }\r\n\r\n  static subtract(a,b) {\r\n    return a - b;\r\n  }\r\n\r\n  static divide(a,b) {\r\n    return a / b;\r\n  }\r\n}"},"lineCount":null}},"error":null,"hash":"916b7505df12653381c3a0dccc0482dd","cacheData":{"env":{}}}